public class QueensAlgorithm {

	public int[][] board;
	
	public static void main(String args[])
    {
		final int N = 8;
		QueensAlgorithm Queen = new QueensAlgorithm(N);
		Queen.solve(N);
    }
	
	//set board to 2-dimensional array created with dimensions NxN (or 8x8) filled with 0's
	public QueensAlgorithm(int N) {
		board = new int[N][N];
		for(int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				board[i][j] = 0;
			}
		}
	}
	
	//print solution
	public void solve(int N) {
		if(placeQueen(board, 0) == true) {
			for(int i = 0; i < N; i++) {
				for (int j = 0; j < N; j++) {
					System.out.print(" " + board[i][j]);
				}
				System.out.println();
			}
		}else{
			System.out.println("NO SOLUTION EXISTS");
		}
	}
		
	
	//place queen one column at a time
		public boolean placeQueen(int board[][], int column) {
			if(column >= 8) {
				return true;
			}
			for(int row = 0; row < 8; row++) {
				//check if queen can be placed in row, column
				if(canPlace(board, row, column)){
					//place queen
					board[row][column] = 1;
					//solve next queen
					if(placeQueen(board, column+1)) {
						return true;
					}
					//backtrack if necessary
					board[row][column] = 0;
				}
			}
			return false;
		}
		
		//method to determine if queen can be placed at [row][column]
		public boolean canPlace (int [][] board, int row, int column) {
			//check row
			int i, j;
			for(i = 0; i < column; i++){
				if (board[row][i] == 1) {
					return false;
				}
			}
			//check upper diagonal 
			for(i = row, j = column; i >= 0 && j >= 0; i--, j--) {
				if (board[i][j] == 1) {
					return false;
				}
			}
			//check lower diagonal
			for (i = row, j = column; i < board.length && j >= 0; i++, j--) {
				if (board[i][j] == 1) {
					return false;
				}
			}	
			//confirm safe to place queen at [row][column]	
			return true;
		}
			
		
		 
    
}
